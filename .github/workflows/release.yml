name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: turnkey-cli
            asset_name: turnkey-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: turnkey-cli
            asset_name: turnkey-linux-aarch64
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            artifact_name: turnkey-cli
            asset_name: turnkey-linux-armv7
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2

      - name: Install cross-compilation tools
        if: matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          cargo install cross

      - name: Build release binary
        run: |
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
            cargo build --release --bin turnkey-cli --target ${{ matrix.target }}
          else
            cross build --release --bin turnkey-cli --target ${{ matrix.target }}
          fi

      - name: Strip binary
        run: |
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }} || true

      - name: Create tarball
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

  publish-crate:
    name: Publish to crates.io
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish turnkey-core
        run: cd turnkey-core && cargo publish --token ${{ secrets.CARGO_TOKEN }} || true
      - name: Wait for crates.io
        run: sleep 30
      - name: Publish turnkey-protocol
        run: cd turnkey-protocol && cargo publish --token ${{ secrets.CARGO_TOKEN }} || true
